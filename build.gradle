plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.vision-x'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(11)
	}
}

repositories {
	maven {
		url 'https://nexus.geomatys.com/repository/geotoolkit/'
	}
	maven {
		url 'https://repo.osgeo.org/repository/release/'
	}
	maven {
		url 'https://maven.openkm.com'
	}
	maven {
		url 'https://repo.osgeo.org/repository/snapshot/'
	}
	maven {
		url 'https://repo.spring.io/snapshot'
	}
	maven {
		url "https://jitpack.io"
	}
	// 필요한 경우 아래 두 리포지토리도 사용 가능
	//maven {
	//	url 'http://maven.egovframework.kr:8080/maven/'
	//	allowInsecureProtocol = true
	//}
	maven {
		url 'http://www.egovframe.go.kr/maven/'
		allowInsecureProtocol = true
	}
	maven { url "https://maven.egovframe.go.kr/maven/" } // 전자정부 프레임워크

	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	implementation 'javax.validation:validation-api:2.0.1.Final'
	implementation 'org.hibernate.validator:hibernate-validator:6.1.7.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	// Lombok(필요한 경우)
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	implementation 'org.springframework.boot:spring-boot-starter-security'

	// implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	// implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
	// implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	// implementation 'com.amazonaws:aws-java-sdk-s3:1.11.238'

	// implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.session:spring-session-data-redis'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// developmentOnly 'org.springframework.boot:spring-boot-devtools'
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	enabled = false
}

bootRun {
	args = ['--spring.profiles.active=dev']
}

task runProd(type: JavaExec) {
	classpath = sourceSets.main.runtimeClasspath
	main = 'com.vision_x.vision_x.VisionXApplication'
	args = ['--spring.profiles.active=prod']
}
